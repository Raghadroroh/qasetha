rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isGuest() {
      return request.auth != null && request.auth.token.firebase.sign_in_provider == 'anonymous';
    }

    function isRegisteredUser() {
      return isAuthenticated() && !isGuest();
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'admin';
    }

    function isStoreOwner() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'store_owner';
    }

    function isVerifiedUser() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isVerified == true;
    }

    // âœ… FIXED: guestHasProfile now uses `exists` correctly
    function guestHasProfile() {
      return exists(/databases/$(database)/documents/guestProfiles/$(request.auth.uid));
    }

    function isValidUserData() {
      let data = request.resource.data;
      return data.keys().hasAll(['email', 'fullName', 'phoneNumber', 'userType']) &&
        data.userType in ['customer', 'store_owner', 'admin'] &&
        data.email is string &&
        data.fullName is string &&
        data.phoneNumber is string;
    }

    function isValidEmploymentData() {
      let emp = request.resource.data.employment;
      return emp == null || (
        emp.isEmployed is bool &&
        emp.sector in ['public', 'private', 'none'] &&
        emp.employerName is string &&
        emp.jobTitle is string
      );
    }

    function isValidAddressData() {
      let addr = request.resource.data.address;
      return addr == null || (
        addr.street is string &&
        addr.city is string &&
        addr.governorate is string
      );
    }

    match /guestProfiles/{guestId} {
      allow read: if isAuthenticated() && (isOwner(guestId) || isAdmin());
      allow create: if isGuest() && isOwner(guestId) && 
        request.resource.data.keys().hasAll(['createdAt', 'lastSeen']) &&
        request.resource.data.isGuest == true;
      allow update: if isGuest() && isOwner(guestId) &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['lastSeen', 'viewedProducts', 'cartItems', 'preferences']);
      allow delete: if isOwner(guestId) || isAdmin();
    }

    match /guestActivities/{activityId} {
      allow read: if isAdmin();
      allow create: if isGuest();
      allow update, delete: if false;
    }

    match /users/{userId} {
      allow read: if isRegisteredUser() && (
        isOwner(userId) || isAdmin() || (isStoreOwner() && isVerifiedUser())
      );
      allow create: if isRegisteredUser() && 
        isOwner(userId) && 
        isValidUserData() &&
        request.resource.data.userType == 'customer' &&
        request.resource.data.creditLimit == 0 &&
        request.resource.data.availableCredit == 0 &&
        request.resource.data.totalDebt == 0 &&
        request.resource.data.isVerified == false;
      allow update: if isRegisteredUser() && (
        (isOwner(userId) && 
          !request.resource.data.diff(resource.data).affectedKeys().hasAny([
            'creditLimit', 'availableCredit', 'totalDebt', 'rating', 
            'isVerified', 'userType', 'createdAt'
          ]) &&
          (isValidUserData() || 
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['profileImage', 'updatedAt']))
        ) || isAdmin()
      );
      allow delete: if isAdmin();
    }

    match /userProfiles/{userId} {
      allow read: if isRegisteredUser() && (
        isOwner(userId) || isAdmin() || (isStoreOwner() && isVerifiedUser())
      );
      allow create: if isRegisteredUser() && isOwner(userId);
      allow update: if isRegisteredUser() && isOwner(userId);
      allow delete: if isAdmin();
    }

    match /products/{productId} {
      allow read: if true;
      allow create: if isRegisteredUser() && (
        isStoreOwner() || isAdmin()
      ) && request.resource.data.storeId == request.auth.uid;
      allow update: if isRegisteredUser() && (
        (isStoreOwner() && resource.data.storeId == request.auth.uid) || isAdmin()
      );
      allow delete: if isRegisteredUser() && (
        (isStoreOwner() && resource.data.storeId == request.auth.uid) || isAdmin()
      );
    }

    match /stores/{storeId} {
      allow read: if true;
      allow create: if isRegisteredUser() && isStoreOwner() && isOwner(storeId);
      allow update: if isRegisteredUser() && (
        (isStoreOwner() && isOwner(storeId)) || isAdmin()
      );
      allow delete: if isAdmin();
    }

    match /orders/{orderId} {
      allow read: if isRegisteredUser() && (
        resource.data.userId == request.auth.uid ||
        resource.data.storeId == request.auth.uid ||
        isAdmin()
      );
      allow create: if isRegisteredUser() && 
        request.resource.data.userId == request.auth.uid &&
        isVerifiedUser();
      allow update: if isRegisteredUser() && (
        (resource.data.storeId == request.auth.uid && 
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt'])
        ) || isAdmin()
      );
      allow delete: if isAdmin();
    }

    match /installmentPlans/{planId} {
      allow read: if isRegisteredUser() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      allow create: if isRegisteredUser() && 
        request.resource.data.userId == request.auth.uid &&
        isVerifiedUser();
      allow update: if isAdmin();
      allow delete: if false;
    }

    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /notifications/{notificationId} {
      allow read: if isRegisteredUser() && resource.data.userId == request.auth.uid;
      allow create: if isRegisteredUser() && (
        isAdmin() || (isStoreOwner() && request.resource.data.type == 'order')
      );
      allow update: if isRegisteredUser() && 
        isOwner(resource.data.userId) &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      allow delete: if isRegisteredUser() && isOwner(resource.data.userId);
    }

    match /supportTickets/{ticketId} {
      allow read: if isRegisteredUser() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      allow create: if isRegisteredUser() && request.resource.data.userId == request.auth.uid;
      allow update: if isRegisteredUser() && (
        (resource.data.userId == request.auth.uid && 
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status'])
        ) || isAdmin()
      );
      allow delete: if false;
    }

    match /settings/{document} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /guestCarts/{cartId} {
      allow read, write: if isGuest() && isOwner(cartId);
      allow read: if isAdmin();
      allow delete: if isOwner(cartId) || isAdmin();
    }

    match /guestWishlists/{wishlistId} {
      allow read, write: if isGuest() && isOwner(wishlistId);
      allow read: if isAdmin();
      allow delete: if isOwner(wishlistId) || isAdmin();
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}